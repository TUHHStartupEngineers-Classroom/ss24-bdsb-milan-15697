{
  "hash": "afa80d226d90f5a9f552e52a512d41c9",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"**Milan Bhardwaj**, *Matr. Nr. 562289*\"\n---\n\n\n# First Challenge\n## Goal: Map the time course of the cumulative Covid-19 cases!\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_5bb8ca71e5c7937fb39405d6e9c0d785'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncovid_data <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 394167 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncountries <- covid_data %>%\n  group_by(location) %>% \n  group_split(.keep = TRUE)\n```\n:::\n\n\n## Filter\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_c1eced34a1e222728bc6057532d2bd36'}\n\n```{.r .cell-code}\nfilter <- c(\"Germany\", \"India\", \"Netherlands\", \"Canada\", \"Australia\")\n\ngetCountry <- function(x, country){\n  countries_select <- data.frame()\n  for(i in 1:length(x)){\n    if(x[[i]]$location[[1]] %in% country){\n      return (x[[i]])\n    } else {\n      next\n    }\n  }\n  return (countries_select)\n}\n```\n:::\n\n\n## Calling function for individual countries\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-3_c985ba5b88417610128f8bb54a92f026'}\n\n```{.r .cell-code}\nres <- \n  getCountry(countries, c(\"Germany\")) %>% \n  rbind(getCountry(countries, c(\"India\"))) %>% \n  rbind(getCountry(countries, c(\"Netherlands\"))) %>% \n  rbind(getCountry(countries, c(\"Canada\"))) %>% \n  rbind(getCountry(countries, c(\"Australia\")))\n```\n:::\n\n  \n## Visualization\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-4_3df220a0ad2c272197190169ea70ec96'}\n\n```{.r .cell-code}\nlibrary(viridis)\n\nres %>% \n  ggplot(aes(date, total_cases, color = location))+\n  \n  geom_line(linewidth = 0.5) + \n  scale_y_continuous(labels = scales::comma) +\n  theme(\n    legend.position = \"bottom\",\n  ) + \n  \n  labs(\n    title = \"cases by country\",\n    x = \"year\",\n    y = \"sum\",\n    color = \"Country\",\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 162 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Second Challenge\n\n## Goal: Visualize the distribution of the mortality rate (deaths / population)\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-5_096873beaa822c199d181ad9754bc5fc'}\n\n```{.r .cell-code}\ncovid_data <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 394167 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Data Segregation\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-6_2059fb16274adedadcdc030a372ea74b'}\n\n```{.r .cell-code}\ndata <- covid_data %>% \n  select(location, total_deaths) %>% \n  group_by(location) %>% \n  slice_max(order_by = total_deaths, n = 1) %>% \n  mutate(location = case_when(\n    \n    location == \"India\" ~ \"India\",\n    location == \"Germany\" ~ \"Germany\",\n    location == \"Canada\" ~ \"Canada\",\n    TRUE ~ location\n    \n  )) %>%\n  distinct()\n```\n:::\n\n\n## Longitudinal and lateral data\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-7_264381b4f7977ed04260596743766978'}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\n```\n:::\n\n\n## Final Plot\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-8_73053814ad1e4d476d7dc32b2f264713'}\n\n```{.r .cell-code}\nfinal_plot <- ggplot() +\n  geom_map(data = world, map = world,\n           aes(x = long, y = lat, group = group, map_id=region),\n           fill = \"white\", colour = \"#7f7f7f\", linewidth = 0.5) +\n  \n  geom_map(data = data, map=world,\n           aes(fill=total_deaths, map_id=location, color = total_deaths),\n           colour=\"#7f7f7f\", linewidth=0.5) +\n  \n  scale_fill_continuous(low=\"red\", high=\"black\", guide=\"colorbar\") +\n  scale_y_continuous(breaks=c()) +\n  scale_x_continuous(breaks=c()) +\n  labs(title=\"Covid Deaths\", fill=\"Scale\") +\n  theme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in geom_map(data = world, map = world, aes(x = long, y = lat, group =\n#> group, : Ignoring unknown aesthetics: x and y\n```\n:::\n\n```{.r .cell-code}\nfinal_plot\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}